{"version":3,"sources":["address-form/address/AddressDisplay.tsx","utility/utility.ts","address-form/address/AddressInput.tsx","address-form/address/AddressSelect.tsx","constants.ts","address-form/address/postcode/PostcodeInput.tsx","address-form/time/TimeSelect.tsx","address-form/Form.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddressDisplay","props","address","time","className","firstLine","secondLine","city","postcode","width","src","onClick","onRemove","years","months","formatAddress","splitAddress","split","console","log","AddressInput","useState","setFirstLine","setSecondLine","setCity","setPostcode","useEffect","onSubmit","event","preventDefault","target","addAddress","value","handleAddAddress","type","required","onChange","e","currentTarget","id","AddressSelect","addressOptions","setAddressOptions","selected","setSelected","error","setError","a","fetchAddresses","updateComponent","fetch","then","res","json","data","addresses","catch","name","placeholder","map","index","replace","PostcodeInput","handleSearchPostcode","toCheck","undefined","alpha1","alpha2","alpha5","pcexp","Array","push","RegExp","postCode","valid","i","length","test","exec","$1","toUpperCase","$3","checkPostCode","onSearch","onKeyDown","key","from","keys","TimeSelect","year","setYears","month","setMonths","Form","setAddresses","entry","slice","handleRemoveAddress","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.c6dae59c.chunk.js","sourcesContent":["import React, { Dispatch, MouseEvent, MouseEventHandler, SetStateAction, SyntheticEvent, useEffect, useState } from 'react';\nimport { Address, Time } from '../../types/types';\n\nfunction AddressDisplay(props: { address: Address, time: Time, onRemove: () => void }) {\n\n    const {address, time} = props;\n    return (\n        <div className={\"address-display\"}>\n            <div>\n                <p>{`${address.firstLine}, ${address.secondLine}, ${address.city}, ${address.postcode}`}</p>\n                <img width={10} src={\"/assets/delete.png\"} onClick={props.onRemove}/>\n            </div>\n            <p> Time at address: {`${time.years} ${time.years === \"1\" ? \"year\" : \"years\"}, ${time.months} ${time.months === \"1\" ? \"month\" : \"months\"}`}</p>\n        </div>\n    );\n}\n\nexport default AddressDisplay;\n\n","export function checkPostCode (toCheck: string | undefined) {\n\n    if (toCheck === undefined) return false;\n\n    // Permitted letters depend upon their position in the postcode.\n    var alpha1 = \"[abcdefghijklmnoprstuwyz]\";                       // Character 1\n    var alpha2 = \"[abcdefghklmnopqrstuvwxy]\";                       // Character 2\n    var alpha3 = \"[abcdefghjkpmnrstuvwxy]\";                         // Character 3\n    var alpha4 = \"[abehmnprvwxy]\";                                  // Character 4\n    var alpha5 = \"[abdefghjlnpqrstuwxyz]\";                          // Character 5\n    var BFPOa5 = \"[abdefghjlnpqrst]\";                               // BFPO alpha5\n    var BFPOa6 = \"[abdefghjlnpqrstuwzyz]\";                          // BFPO alpha6\n    \n    // Array holds the regular expressions for the valid postcodes\n    var pcexp = new Array ();\n    \n    // BFPO postcodes\n    pcexp.push (new RegExp (\"^(bf1)(\\\\s*)([0-6]{1}\" + BFPOa5 + \"{1}\" + BFPOa6 + \"{1})$\",\"i\"));\n  \n    // Expression for postcodes: AN NAA, ANN NAA, AAN NAA, and AANN NAA\n    pcexp.push (new RegExp (\"^(\" + alpha1 + \"{1}\" + alpha2 + \"?[0-9]{1,2})(\\\\s*)([0-9]{1}\" + alpha5 + \"{2})$\",\"i\"));\n    \n    // Expression for postcodes: ANA NAA\n    pcexp.push (new RegExp (\"^(\" + alpha1 + \"{1}[0-9]{1}\" + alpha3 + \"{1})(\\\\s*)([0-9]{1}\" + alpha5 + \"{2})$\",\"i\"));\n  \n    // Expression for postcodes: AANA  NAA\n    pcexp.push (new RegExp (\"^(\" + alpha1 + \"{1}\" + alpha2 + \"{1}\" + \"?[0-9]{1}\" + alpha4 +\"{1})(\\\\s*)([0-9]{1}\" + alpha5 + \"{2})$\",\"i\"));\n    \n    // Exception for the special postcode GIR 0AA\n    pcexp.push (/^(GIR)(\\s*)(0AA)$/i);\n    \n    // Standard BFPO numbers\n    pcexp.push (/^(bfpo)(\\s*)([0-9]{1,4})$/i);\n    \n    // c/o BFPO numbers\n    pcexp.push (/^(bfpo)(\\s*)(c\\/o\\s*[0-9]{1,3})$/i);\n    \n    // Overseas Territories\n    pcexp.push (/^([A-Z]{4})(\\s*)(1ZZ)$/i);  \n    \n    // Anguilla\n    pcexp.push (/^(ai-2640)$/i);\n  \n    // Load up the string to check\n    var postCode = toCheck;\n  \n    // Assume we're not going to find a valid postcode\n    var valid = false;\n    \n    // Check the string against the types of post codes\n    for ( var i=0; i<pcexp.length; i++) {\n    \n      if (pcexp[i].test(postCode)) {\n      \n        // The post code is valid - split the post code into component parts\n        pcexp[i].exec(postCode);\n        \n        // Copy it back into the original string, converting it to uppercase and inserting a space \n        // between the inward and outward codes\n        postCode = RegExp.$1.toUpperCase() + \" \" + RegExp.$3.toUpperCase();\n        \n        // If it is a BFPO c/o type postcode, tidy up the \"c/o\" part\n        postCode = postCode.replace (/C\\/O\\s*/,\"c/o \");\n        \n        // If it is the Anguilla overseas territory postcode, we need to treat it specially\n        if (toCheck.toUpperCase() == 'AI-2640') {postCode = 'AI-2640'};\n        \n        // Load new postcode back into the form element\n        valid = true;\n        \n        // Remember that we have found that the code is valid and break from loop\n        break;\n      }\n    }\n    \n    // Return with either the reformatted valid postcode or the original invalid postcode\n    if (valid) { return true } else return false;\n  }\n  \n// Split the address and extract the lines of the address\nexport const formatAddress = (address: string) => {\n    const splitAddress = address.split(\", \");\n\n    console.log(splitAddress);\n\n    return {\n        firstLine: splitAddress[0],\n        secondLine: splitAddress[1],\n        city: splitAddress[5]\n    }\n}","import React, { Dispatch, MouseEvent, MouseEventHandler, SetStateAction, SyntheticEvent, useEffect, useState } from 'react';\nimport { AddressEntry } from '../../types/types';\n\nfunction AddressInput(props: { address: any, postcode: string, addAddress: (firstLine: string, secondLine: string, city: string, postcode: string) => void }) {\n\n    const [firstLine, setFirstLine] = useState(props.address.firstLine);\n    const [secondLine, setSecondLine] = useState(props.address.secondLine);\n    const [city, setCity] = useState(props.address.city);\n    const [postcode, setPostcode] = useState(props.postcode);\n\n    useEffect(() => {\n        setFirstLine(props.address.firstLine);\n        setSecondLine(props.address.secondLine);\n        setCity(props.address.city);\n        setPostcode(props.postcode);\n    }, [props])\n\n    const handleAddAddress = (event: any) => {\n        event.preventDefault();\n        console.log(event.target);\n        props.addAddress(event.target[0].value, event.target[1].value, event.target[2].value, event.target[3].value)\n    }\n\n    return (\n        <form onSubmit={(event) => handleAddAddress(event)}>\n            <label>Address line 1 *</label>\n            <div className=\"form-input\">\n                <input type={\"text\"} value={firstLine} required onChange={(e) => setFirstLine(e.currentTarget.value)}/>\n            </div>\n\n            <label>Address line 2</label>\n            <div className=\"form-input\">\n                <input type={\"text\"} value={secondLine} onChange={(e) => setSecondLine(e.currentTarget.value)}/>\n            </div>\n\n            <label>City *</label>\n            <div className=\"form-input\">\n                <input type={\"text\"} value={city} required onChange={(e) => setCity(e.currentTarget.value)}/>\n            </div>\n\n            <label>Postcode *</label>\n            <div className=\"form-input\">\n                <input type={\"text\"} value={postcode} required onChange={(e) => setPostcode(e.currentTarget.value)}/>\n            </div>\n\n            <div className={\"submit-div\"}>\n                <input type=\"submit\" id={\"submit-button\"} value=\"Add address\"/>\n            </div>\n\n        </form>\n    );\n}\n\nexport default AddressInput;\n\n","import React, { ChangeEvent, Dispatch, MouseEvent, MouseEventHandler, SetStateAction, SyntheticEvent, useEffect, useState } from 'react';\nimport { API_KEY } from '../../constants';\nimport { AddressEntry } from '../../types/types';\nimport { formatAddress } from '../../utility/utility';\nimport AddressInput from './AddressInput';\n\n\n\nfunction AddressSelect(props: { postcode: string, addAddress: (firstLine: string, secondLine: string, city: string, postcode: string) => void }) {\n\n    const [addressOptions, setAddressOptions] = useState([]);\n    const [selected, setSelected] = useState(\"-1\");\n    const [error, setError] = useState<null | string>(null);\n\n\n    useEffect(() => {\n        async function updateComponent() {\n            await fetchAddresses();\n        }\n        updateComponent();\n    }, [props.postcode])\n\n    const fetchAddresses = async () => {\n        fetch(`https://api.getAddress.io/find/${props.postcode}?api-key=${API_KEY}`)\n            .then((res) => res.json())\n            .then((data) => { setError(null); setAddressOptions(data.addresses); })\n            .catch(() => setError(\"There was an error finding the postcode.\"))\n    }\n\n    return (\n        <>\n            <label>Address</label>\n            \n            <div className=\"form-input\">\n                <select name=\"address\" id=\"address\" placeholder=\"Select your address\" value={selected} onChange={(event: ChangeEvent<HTMLSelectElement>) => setSelected(event.target.value)}>\n                    <option value=\"-1\">Select your address</option>\n                    {addressOptions.map((address: string, index: number) => (\n                        <option key={`option-${index}`} value={address}>{address.replace(/ ,/g, \"\")}</option>\n                    ))}\n                </select>\n                <img width={15} src=\"/assets/chevron-down.png\"/>\n            </div>\n\n            <img className=\"double-chev\" width={8} src={\"/assets/double-chevron.png\"}/>\n\n            { selected !== \"-1\" && \n                <AddressInput \n                    address={formatAddress(selected)} \n                    postcode={props.postcode} \n                    addAddress={props.addAddress}\n                />\n            }\n\n            { error !== \"\" && <p>{error}</p>}\n        \n        </>\n\n    );\n}\n\nexport default AddressSelect;\n\n","export const API_KEY = \"2JAuH_oj5UCkmTvKvZhAnA30092\";","import React, { Dispatch, MouseEvent, MouseEventHandler, SetStateAction, SyntheticEvent, useEffect, useState } from 'react';\nimport { checkPostCode } from '../../../utility/utility';\n\nfunction PostcodeInput(props: { postcode: string | undefined, onSearch: Dispatch<SetStateAction<string | undefined>> }) {\n\n    const [error, setError] = useState(\"\");\n    const [postcode, setPostcode] = useState(\"\");\n\n    const handleSearchPostcode = (): void => {\n        if (checkPostCode(postcode)) {\n            setError(\"\");\n            props.onSearch(postcode)\n        } else {\n            setError(\"This is an invalid postcode\");\n        }\n    }\n\n    const handleKeyDown = (event: any) => {\n        if (event.key === 'Enter') {\n          handleSearchPostcode()\n        } \n      }\n\n    return (\n        <>\n            <label>Postcode search</label>\n            <div className=\"form-input\">\n                <input type={\"text\"} id={\"postcode-input\"} value={postcode} onChange={(e) => setPostcode(e.currentTarget.value.toUpperCase())} onKeyDown={handleKeyDown}/>\n                <img src=\"/assets/magnifying-glass.png\" width={15} onClick={handleSearchPostcode}/>\n            </div>\n            <p>{error}</p>\n        </>\n    );\n}\n\nexport default PostcodeInput;\n\n","import React, { Dispatch, MouseEvent, MouseEventHandler, SetStateAction, SyntheticEvent, useEffect, useState } from 'react';\nimport { AddressEntry } from '../../types/types';\n\nconst years = Array.from(Array(30).keys())\nconst months = Array.from(Array(12).keys())\n\n\nfunction TimeSelect(props: { year: string, month: string, setMonths: Dispatch<SetStateAction<string>>, setYears: Dispatch<SetStateAction<string>> }) {\n\n    return (\n        <>\n        <label>How long have you lived at your current address?</label>\n        <div className=\"time-select-div\">\n            <div className=\"form-input\">\n                <select name=\"year\" id=\"year-select\" value={props.year} onChange={(e) => props.setYears(e.target.value)}>\n                    {years.map((year: number, index: number) => (\n                        <option value={year}>{year}{index === 1 ? \" year\" : \" years\"}</option>\n                    ))}\n                </select>\n                <img src=\"/assets/chevron-down.png\"/>\n\n            </div>\n            <div className=\"form-input\">\n                <select name=\"month\" id=\"month-select\" value={props.month} onChange={(e) => props.setMonths(e.target.value)}>\n                    {months.map((month: number, index: number) => (\n                        <option value={month}>{month}{index === 1 ? \" month\" : \" months\"}</option>\n                    ))}\n                </select>\n                <img src=\"/assets/chevron-down.png\"/>\n            </div>\n        </div>\n        </>\n    );\n}\n\nexport default TimeSelect;\n\n","import React, { useState } from 'react';\nimport { AddressEntry } from '../types/types';\nimport AddressDisplay from './address/AddressDisplay';\nimport AddressSelect from './address/AddressSelect';\nimport PostcodeInput from './address/postcode/PostcodeInput';\nimport TimeSelect from './time/TimeSelect';\n\nfunction Form() {\n\n    const [postcode, setPostcode] = useState<string | undefined>(undefined);\n    const [addresses, setAddresses] = useState<AddressEntry[]>([]);\n    const [years, setYears] = useState<string>(\"0\")\n    const [months, setMonths] = useState<string>(\"0\")\n\n    const handleAddAddress = (firstLine: string, secondLine: string, city: string, postcode: string) => {\n        console.log({ address: { firstLine, secondLine, city, postcode }, time: { years, months } })\n        setAddresses([...addresses, { address: { firstLine, secondLine, city, postcode }, time: { years, months } }]);\n        setPostcode(undefined);\n        setYears(\"0\");\n        setMonths(\"0\");\n    }\n\n    const handleRemoveAddress = (index: number) => {\n        setAddresses([...addresses.slice(0, index), ...addresses.slice(index + 1)])\n    }\n\n\n    return (\n        <div className=\"background\">\n            <div className=\"search-container\">\n                <h3> Address Search </h3>\n                <p>Please enter your address</p>\n                <div className={\"horizontal-bar\"}></div>\n                \n                <div>\n                {\n                    addresses.map((entry: AddressEntry, index: number) => {\n                        return <AddressDisplay address={entry.address} time={entry.time} onRemove={() => handleRemoveAddress(index)}/>\n                    })\n                }\n                </div>\n                \n\n                <TimeSelect \n                    year={years} \n                    month={months}\n                    setYears={setYears}\n                    setMonths={setMonths}\n                />\n\n                <PostcodeInput \n                    postcode={postcode} \n                    onSearch={setPostcode}\n                />\n\n                {\n                    postcode && \n\n                    <AddressSelect \n                        postcode={postcode} \n                        addAddress={handleAddAddress}\n                    />\n                } \n\n            </div>\n        </div>\n    );\n}\n\nexport default Form;\n","import React from 'react';\r\nimport './css/styles.css';\r\nimport Form from './address-form/Form';\r\n\r\nfunction App() {\r\n  return (\r\n    <Form/>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from \"./serviceWorker\"\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n      <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}